"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_background_http_1 = require("nativescript-background-http");
var camera = require("nativescript-camera");
var Subject_1 = require("rxjs/Subject");
var platform_1 = require("tns-core-modules/platform");
var fs = require("file-system");
var imageSource = require("image-source");
var nativescript_mediafilepicker_1 = require("nativescript-mediafilepicker");
var ItemsComponent = (function () {
    function ItemsComponent() {
        this.UploadSession = nativescript_background_http_1.session('image-upload');
    }
    ItemsComponent.prototype.ngOnInit = function () { };
    ItemsComponent.prototype.VideoPicker = function () {
        var _this = this;
        var options = {
            android: {
                mxcount: 1,
                enableImagePicker: false,
                enableVideoPicker: true,
                enableCameraSupport: true
            },
            ios: {
                allowsMultipleSelection: false,
                title: "videos",
                mediaTypes: "video",
                showCameraButton: false
            }
        };
        var mediafilepicker = new nativescript_mediafilepicker_1.Mediafilepicker();
        mediafilepicker.on("getFiles", function (res) {
            var files = res.files;
            if (files.length > 0) {
                files = files.split(",");
                files.forEach(function (file) {
                    console.log(file);
                    _this.uploadMultipartImagePicker({ fileUri: file })
                        .subscribe({
                        next: function (e) {
                            console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
                        },
                        error: function (e) {
                            console.log(JSON.stringify(e));
                        },
                        complete: function () {
                            console.log("complete");
                        }
                    });
                });
            }
            else {
                console.log("There was some problem to select the file. Looks like user has cancel it.");
            }
        });
        mediafilepicker.on("error", function (res) {
            console.log(res.msg);
        });
        mediafilepicker.startFilePicker(options);
    };
    ItemsComponent.prototype.cameraOpen = function () {
        var _this = this;
        camera.requestPermissions();
        camera
            .takePicture({
            saveToGallery: true,
            cameraFacing: 'front'
        })
            .then(function (imageAsset) {
            var image;
            if (platform_1.isAndroid) {
                image = {
                    fileUri: imageAsset.android
                };
                _this.uploadMultipartImagePicker(image)
                    .subscribe({
                    next: function (e) {
                        console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
                    },
                    error: function (e) {
                        console.log(JSON.stringify(e));
                    },
                    complete: function () {
                        console.log("complete");
                    }
                });
            }
            else {
                var source = new imageSource.ImageSource();
                source.fromAsset(imageAsset)
                    .then(function (imageSource) {
                    var folder = fs.knownFolders.documents();
                    var path = fs.path.join(folder.path, "Temp" + Date.now() + ".jpg");
                    var saved = imageSource.saveToFile(path, "png");
                    console.log(saved);
                    if (saved) {
                        _this.uploadMultipartImagePicker({ fileUri: path })
                            .subscribe({
                            next: function (e) {
                                console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
                            },
                            error: function (e) {
                                console.log(JSON.stringify(e));
                            },
                            complete: function () {
                                console.log("complete");
                            }
                        });
                    }
                });
            }
        })
            .catch(function (err) {
            console.log("Error -> " + err.message);
        });
    };
    ItemsComponent.prototype.pickerOpen = function () {
        var _this = this;
        var options = {
            android: {
                mxcount: 1,
                enableImagePicker: true,
                enableVideoPicker: false,
                enableCameraSupport: true
            },
            ios: {
                allowsMultipleSelection: false,
                title: "Images",
                mediaTypes: "image",
                showCameraButton: false
            }
        };
        var mediafilepicker = new nativescript_mediafilepicker_1.Mediafilepicker();
        mediafilepicker.on("getFiles", function (res) {
            var files = res.files;
            if (files.length > 0) {
                files = files.split(",");
                files.forEach(function (file) {
                    console.log(file);
                    _this.uploadMultipartImagePicker({ fileUri: file })
                        .subscribe({
                        next: function (e) {
                            console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
                        },
                        error: function (e) {
                            console.log(JSON.stringify(e));
                        },
                        complete: function () {
                            console.log("complete");
                        }
                    });
                });
            }
            else {
                console.log("There was some problem to select the file. Looks like user has cancel it.");
            }
        });
        mediafilepicker.on("error", function (res) {
            console.log(res.msg);
        });
        mediafilepicker.startFilePicker(options);
    };
    ItemsComponent.prototype.uploadMultipartImagePicker = function (image) {
        var fileUri = image.fileUri;
        var filename = fileUri.substring(fileUri.lastIndexOf('/') + 1);
        var mimetype = filename.substring(filename.lastIndexOf('.') + 1);
        var uploadType;
        var request;
        if (mimetype === 'mp4') {
            uploadType = "video";
            request = {
                url: "https://requestb.in/1mf5ae31",
                method: 'POST',
                headers: {
                    "Content-Type": "application/octet-stream",
                    "File-Name": filename,
                    'Authorization': "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1laWQiOiJiYWM0ZWM2Yi1kNmM4LTQ0NjAtOGU5ZS1mNTUyMWZhZGE3YWUiLCJ1bmlxdWVfbmFtZSI6Im1fcmF6YV9oYXNzYW5AaG90bWFpbC5jb20iLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2FjY2Vzc2NvbnRyb2xzZXJ2aWNlLzIwMTAvMDcvY2xhaW1zL2lkZW50aXR5cHJvdmlkZXIiOiJBU1AuTkVUIElkZW50aXR5IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiI2Njc3NjE5OS1hYTJjLTQ5YmQtYmY1YS1iMzg2MzY2NTUzOWQiLCJVc2VySWQiOiJiYWM0ZWM2Yi1kNmM4LTQ0NjAtOGU5ZS1mNTUyMWZhZGE3YWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0IiwiYXVkIjoiNDE0ZTE5MjdhMzg4NGY2OGFiYzc5ZjcyODM4MzdmZDEiLCJleHAiOjE1NjYyNTQ0MjksIm5iZiI6MTUxNDQxNDQyOX0.fp0IyQSId8sisGQ3kqMPXovzcl8KGZ0M9LBjnSlOpSE",
                    "UserId": "bac4ec6b-d6c8-4460-8e9e-f5521fada7ae",
                    "QuestionId": '5a4420b53a5d5a1c38e34028',
                    "GameId": '13'
                },
                description: "Uploading " + filename
            };
        }
        else {
            uploadType = "image";
            request = {
                url: "https://requestb.in/1mf5ae31",
                method: 'POST',
                headers: {
                    "Content-Type": "application/octet-stream",
                    "File-Name": filename,
                    'Authorization': "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1laWQiOiJiYWM0ZWM2Yi1kNmM4LTQ0NjAtOGU5ZS1mNTUyMWZhZGE3YWUiLCJ1bmlxdWVfbmFtZSI6Im1fcmF6YV9oYXNzYW5AaG90bWFpbC5jb20iLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2FjY2Vzc2NvbnRyb2xzZXJ2aWNlLzIwMTAvMDcvY2xhaW1zL2lkZW50aXR5cHJvdmlkZXIiOiJBU1AuTkVUIElkZW50aXR5IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiI2Njc3NjE5OS1hYTJjLTQ5YmQtYmY1YS1iMzg2MzY2NTUzOWQiLCJVc2VySWQiOiJiYWM0ZWM2Yi1kNmM4LTQ0NjAtOGU5ZS1mNTUyMWZhZGE3YWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0IiwiYXVkIjoiNDE0ZTE5MjdhMzg4NGY2OGFiYzc5ZjcyODM4MzdmZDEiLCJleHAiOjE1NjYyNTQ0MjksIm5iZiI6MTUxNDQxNDQyOX0.fp0IyQSId8sisGQ3kqMPXovzcl8KGZ0M9LBjnSlOpSE",
                    "UserId": "bac4ec6b-d6c8-4460-8e9e-f5521fada7ae",
                    "QuestionId": '5a4420b53a5d5a1c38e34028',
                    "GameId": '2'
                },
                description: "Uploading "
            };
        }
        var params = [{ name: filename, filename: fileUri, mimeType: uploadType + "/" + mimetype }];
        console.log(JSON.stringify(params));
        var subject = new Subject_1.Subject();
        var task = this.UploadSession.multipartUpload(params, request);
        task.on('progress', function (e) { return subject.next(e); });
        task.on('error', function (e) { return subject.error(e); });
        task.on('complete', function (e) { return subject.complete(); });
        return subject;
    };
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,