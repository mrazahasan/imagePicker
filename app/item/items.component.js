"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_background_http_1 = require("nativescript-background-http");
var Picker = require("nativescript-imagepicker");
var camera = require("nativescript-camera");
var lodash_1 = require("lodash");
var Subject_1 = require("rxjs/Subject");
var platform_1 = require("tns-core-modules/platform");
var fs = require("file-system");
var imageSource = require("image-source");
var ItemsComponent = (function () {
    function ItemsComponent() {
        this.UploadSession = nativescript_background_http_1.session('image-upload');
    }
    ItemsComponent.prototype.ngOnInit = function () {
    };
    ItemsComponent.prototype.cameraOpen = function () {
        var _this = this;
        camera.requestPermissions();
        camera
            .takePicture({
            saveToGallery: true,
            cameraFacing: 'front'
        })
            .then(function (imageAsset) {
            var image;
            if (platform_1.isAndroid) {
                image = {
                    fileUri: imageAsset.android
                };
                _this.uploadImagePicker(image);
            }
            else {
                var source = new imageSource.ImageSource();
                source.fromAsset(imageAsset)
                    .then(function (imageSource) {
                    var folder = fs.knownFolders.documents();
                    var path = fs.path.join(folder.path, "Temp" + Date.now() + ".jpg");
                    var saved = imageSource.saveToFile(path, "png");
                    console.log(saved);
                    if (saved) {
                        _this.uploadImagePicker({ fileUri: path });
                    }
                });
            }
        })
            .catch(function (err) {
            console.log("Error -> " + err.message);
        });
    };
    ItemsComponent.prototype.pickerOpen = function () {
        var context = Picker.create({
            mode: "single",
            mdeiaType: 'image'
        });
        this.startSelection(context);
    };
    ItemsComponent.prototype.startSelection = function (context) {
        var _this = this;
        context
            .authorize()
            .then(function () {
            return context.present();
        })
            .then(function (selection) {
            if (platform_1.isAndroid) {
                return lodash_1.first(selection);
            }
            else {
                return lodash_1.first(selection).getImage();
            }
        })
            .then(function (image) {
            if (platform_1.isAndroid) {
                _this.uploadImagePicker(image);
            }
            else {
                var folder = fs.knownFolders.documents();
                var path = fs.path.join(folder.path, "Temp" + Date.now() + ".png");
                var saved = image.saveToFile(path, "png");
                console.log(saved);
                if (saved) {
                    //use new image path
                    _this.uploadImagePicker({ fileUri: path });
                }
            }
        })
            .catch(function (e) {
            console.error(e);
        });
    };
    ItemsComponent.prototype.uploadImagePicker = function (image) {
        this.uploadMultipartImagePicker(image)
            .subscribe({
            next: function (e) {
                console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
            },
            error: function (e) {
                console.log(JSON.stringify(e));
            },
            complete: function () {
                console.log("complete");
            }
        });
    };
    ItemsComponent.prototype.uploadMultipartImagePicker = function (image) {
        var fileUri = image.fileUri;
        var request = {
            url: "http://35.158.193.55/api/FileUpload/BolSelfie",
            method: 'POST',
            headers: {
                "Content-Type": "application/octet-stream",
                "File-Name": fileUri,
                'Authorization': "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1laWQiOiI4MzlmMDg4NC1jMmI3LTQ1ZGUtOTc1Yy0wOTYwMTY4MWE2M2EiLCJ1bmlxdWVfbmFtZSI6IjgzOWYwODg0LWMyYjctNDVkZS05NzVjLTA5NjAxNjgxYTYzYSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vYWNjZXNzY29udHJvbHNlcnZpY2UvMjAxMC8wNy9jbGFpbXMvaWRlbnRpdHlwcm92aWRlciI6IkFTUC5ORVQgSWRlbnRpdHkiLCJBc3BOZXQuSWRlbnRpdHkuU2VjdXJpdHlTdGFtcCI6ImFiNGNmOWE2LWVmYzEtNDZhNi05N2YyLWNlNzc5NjkxZGMxMCIsIlVzZXJJZCI6IjgzOWYwODg0LWMyYjctNDVkZS05NzVjLTA5NjAxNjgxYTYzYSIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3QiLCJhdWQiOiI0MTRlMTkyN2EzODg0ZjY4YWJjNzlmNzI4MzgzN2ZkMSIsImV4cCI6MTU2MzgxMDQ4NiwibmJmIjoxNTExOTcwNDg2fQ.KUdYperMo_79QhR3sU3odmt7LzuCjdSMa25-AU9QLwA",
                "UserId": "2a2736cb-e5e6-4515-8ad7-02ea0cfef08b"
            },
            description: "Uploading "
        };
        var params = [{ name: "nameOfFile", filename: fileUri, mimeType: 'image/JPG' }];
        console.log(JSON.stringify(params));
        var subject = new Subject_1.Subject();
        var task = this.UploadSession.multipartUpload(params, request);
        task.on('progress', function (e) { return subject.next(e); });
        task.on('error', function (e) { return subject.error(e); });
        task.on('complete', function (e) { return subject.complete(); });
        return subject;
    };
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,