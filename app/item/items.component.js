"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_background_http_1 = require("nativescript-background-http");
var camera = require("nativescript-camera");
var Subject_1 = require("rxjs/Subject");
var platform_1 = require("tns-core-modules/platform");
var fs = require("file-system");
var imageSource = require("image-source");
var nativescript_mediafilepicker_1 = require("nativescript-mediafilepicker");
var ItemsComponent = (function () {
    function ItemsComponent() {
        this.UploadSession = nativescript_background_http_1.session('image-upload');
    }
    ItemsComponent.prototype.ngOnInit = function () { };
    ItemsComponent.prototype.VideoPicker = function () {
        var _this = this;
        var options = {
            android: {
                mxcount: 1,
                enableImagePicker: false,
                enableVideoPicker: true,
                enableCameraSupport: true
            }
        };
        this.mediafilepicker = new nativescript_mediafilepicker_1.Mediafilepicker();
        this.mediafilepicker.on("getFiles", function (res) {
            var files = res.files;
            if (files.length > 0) {
                files = files.split(",");
                files.forEach(function (file) {
                    console.log(file);
                    _this.uploadMultipartImagePicker({ fileUri: file })
                        .subscribe({
                        next: function (e) {
                            console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
                        },
                        error: function (e) {
                            console.log(JSON.stringify(e));
                        },
                        complete: function () {
                            console.log("complete");
                        }
                    });
                });
            }
            else {
                console.log("There was some problem to select the file. Looks like user has cancel it.");
            }
        });
        this.mediafilepicker.on("error", function (res) {
            console.log(res.msg);
        });
        this.mediafilepicker.startFilePicker(options);
    };
    ItemsComponent.prototype.cameraOpen = function () {
        var _this = this;
        camera.requestPermissions();
        camera
            .takePicture({
            saveToGallery: true,
            cameraFacing: 'front'
        })
            .then(function (imageAsset) {
            var image;
            if (platform_1.isAndroid) {
                image = {
                    fileUri: imageAsset.android
                };
                _this.uploadMultipartImagePicker(image)
                    .subscribe({
                    next: function (e) {
                        console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
                    },
                    error: function (e) {
                        console.log(JSON.stringify(e));
                    },
                    complete: function () {
                        console.log("complete");
                    }
                });
            }
            else {
                var source = new imageSource.ImageSource();
                source.fromAsset(imageAsset)
                    .then(function (imageSource) {
                    var folder = fs.knownFolders.documents();
                    var path = fs.path.join(folder.path, "Temp" + Date.now() + ".jpg");
                    var saved = imageSource.saveToFile(path, "png");
                    console.log(saved);
                    if (saved) {
                        _this.uploadMultipartImagePicker({ fileUri: path })
                            .subscribe({
                            next: function (e) {
                                console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
                            },
                            error: function (e) {
                                console.log(JSON.stringify(e));
                            },
                            complete: function () {
                                console.log("complete");
                            }
                        });
                    }
                });
            }
        })
            .catch(function (err) {
            console.log("Error -> " + err.message);
        });
    };
    ItemsComponent.prototype.pickerOpen = function () {
        var _this = this;
        var options = {
            android: {
                mxcount: 1,
                enableImagePicker: true,
                enableVideoPicker: false,
                enableCameraSupport: true
            }
        };
        this.mediafilepicker = new nativescript_mediafilepicker_1.Mediafilepicker();
        this.mediafilepicker.on("getFiles", function (res) {
            var files = res.files;
            if (files.length > 0) {
                files = files.split(",");
                files.forEach(function (file) {
                    console.log(file);
                    _this.uploadMultipartImagePicker({ fileUri: file })
                        .subscribe({
                        next: function (e) {
                            console.log("Upload: " + (e.currentBytes / e.totalBytes) * 100);
                        },
                        error: function (e) {
                            console.log(JSON.stringify(e));
                        },
                        complete: function () {
                            console.log("complete");
                        }
                    });
                });
            }
            else {
                console.log("There was some problem to select the file. Looks like user has cancel it.");
            }
        });
        this.mediafilepicker.on("error", function (res) {
            console.log(res.msg);
        });
        this.mediafilepicker.startFilePicker(options);
    };
    ItemsComponent.prototype.uploadMultipartImagePicker = function (image) {
        var fileUri = image.fileUri;
        var filename = fileUri.substring(fileUri.lastIndexOf('/') + 1);
        var mimetype = filename.substring(filename.lastIndexOf('.') + 1);
        var uploadType;
        var request;
        if (mimetype === 'mp4') {
            uploadType = "video";
            request = {
                url: "http://httpbin.org/post",
                method: 'POST',
                headers: {
                    "Content-Type": "application/octet-stream",
                    "File-Name": filename,
                    'Authorization': "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1laWQiOiJiYWM0ZWM2Yi1kNmM4LTQ0NjAtOGU5ZS1mNTUyMWZhZGE3YWUiLCJ1bmlxdWVfbmFtZSI6Im1fcmF6YV9oYXNzYW5AaG90bWFpbC5jb20iLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2FjY2Vzc2NvbnRyb2xzZXJ2aWNlLzIwMTAvMDcvY2xhaW1zL2lkZW50aXR5cHJvdmlkZXIiOiJBU1AuTkVUIElkZW50aXR5IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiI2Njc3NjE5OS1hYTJjLTQ5YmQtYmY1YS1iMzg2MzY2NTUzOWQiLCJVc2VySWQiOiJiYWM0ZWM2Yi1kNmM4LTQ0NjAtOGU5ZS1mNTUyMWZhZGE3YWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0IiwiYXVkIjoiNDE0ZTE5MjdhMzg4NGY2OGFiYzc5ZjcyODM4MzdmZDEiLCJleHAiOjE1NjYyNTQ0MjksIm5iZiI6MTUxNDQxNDQyOX0.fp0IyQSId8sisGQ3kqMPXovzcl8KGZ0M9LBjnSlOpSE",
                    "UserId": "bac4ec6b-d6c8-4460-8e9e-f5521fada7ae",
                    "QuestionId": '5a4420b53a5d5a1c38e34028',
                    "GameId": '13'
                },
                description: "Uploading " + filename
            };
        }
        else {
            uploadType = "image";
            request = {
                url: "http://httpbin.org/post",
                method: 'POST',
                headers: {
                    "Content-Type": "application/octet-stream",
                    "File-Name": filename,
                    'Authorization': "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1laWQiOiJiYWM0ZWM2Yi1kNmM4LTQ0NjAtOGU5ZS1mNTUyMWZhZGE3YWUiLCJ1bmlxdWVfbmFtZSI6Im1fcmF6YV9oYXNzYW5AaG90bWFpbC5jb20iLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2FjY2Vzc2NvbnRyb2xzZXJ2aWNlLzIwMTAvMDcvY2xhaW1zL2lkZW50aXR5cHJvdmlkZXIiOiJBU1AuTkVUIElkZW50aXR5IiwiQXNwTmV0LklkZW50aXR5LlNlY3VyaXR5U3RhbXAiOiI2Njc3NjE5OS1hYTJjLTQ5YmQtYmY1YS1iMzg2MzY2NTUzOWQiLCJVc2VySWQiOiJiYWM0ZWM2Yi1kNmM4LTQ0NjAtOGU5ZS1mNTUyMWZhZGE3YWUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0IiwiYXVkIjoiNDE0ZTE5MjdhMzg4NGY2OGFiYzc5ZjcyODM4MzdmZDEiLCJleHAiOjE1NjYyNTQ0MjksIm5iZiI6MTUxNDQxNDQyOX0.fp0IyQSId8sisGQ3kqMPXovzcl8KGZ0M9LBjnSlOpSE",
                    "UserId": "bac4ec6b-d6c8-4460-8e9e-f5521fada7ae",
                    "QuestionId": '5a4420b53a5d5a1c38e34028',
                    "GameId": '2'
                },
                description: "Uploading "
            };
        }
        var params = [{ name: filename, filename: fileUri, mimeType: uploadType + "/" + mimetype }];
        console.log(JSON.stringify(params));
        var subject = new Subject_1.Subject();
        var task = this.UploadSession.multipartUpload(params, request);
        task.on('progress', function (e) { return subject.next(e); });
        task.on('error', function (e) { return subject.error(e); });
        task.on('complete', function (e) { return subject.complete(); });
        return subject;
    };
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWtEO0FBRWxELDZFQUFnRTtBQUNoRSw0Q0FBOEM7QUFFOUMsd0NBQXFDO0FBQ3JDLHNEQUFvRDtBQUNwRCxnQ0FBa0M7QUFDbEMsMENBQTRDO0FBQzVDLDZFQUF1RjtBQVF2RjtJQUdJO1FBR0ksSUFBSSxDQUFDLGFBQWEsR0FBRyxzQ0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxpQ0FBUSxHQUFSLGNBQWEsQ0FBQztJQUVkLG9DQUFXLEdBQVg7UUFBQSxpQkEyQ0M7UUExQ0csSUFBSSxPQUFPLEdBQTJCO1lBQ2xDLE9BQU8sRUFBRTtnQkFDTCxPQUFPLEVBQUUsQ0FBQztnQkFDVixpQkFBaUIsRUFBRSxLQUFLO2dCQUN4QixpQkFBaUIsRUFBRSxJQUFJO2dCQUN2QixtQkFBbUIsRUFBRSxJQUFJO2FBQzVCO1NBQ0osQ0FBQztRQUNGLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSw4Q0FBZSxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFHLFVBQUMsR0FBUTtZQUUxQyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBRXRCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFbkIsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBRXpCLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO29CQUVkLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2xCLEtBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQzt5QkFDM0MsU0FBUyxDQUFD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Y29yZVwiO1xuXG5pbXBvcnQgeyBzZXNzaW9uLCBTZXNzaW9uIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1iYWNrZ3JvdW5kLWh0dHBcIjtcbmltcG9ydCAqIGFzIGNhbWVyYSBmcm9tIFwibmF0aXZlc2NyaXB0LWNhbWVyYVwiO1xuaW1wb3J0IHsgZmlyc3QgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tIFwicnhqcy9TdWJqZWN0XCI7XG5pbXBvcnQge2lzQW5kcm9pZH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm1cIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmaWxlLXN5c3RlbVwiO1xuaW1wb3J0ICogYXMgaW1hZ2VTb3VyY2UgZnJvbSBcImltYWdlLXNvdXJjZVwiO1xuaW1wb3J0IHsgTWVkaWFmaWxlcGlja2VyLCBNZWRpYUZpbGVwaWNrZXJPcHRpb25zIH0gZnJvbSAnbmF0aXZlc2NyaXB0LW1lZGlhZmlsZXBpY2tlcic7XG5cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwibnMtaXRlbXNcIixcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHRlbXBsYXRlVXJsOiBcIi4vaXRlbXMuY29tcG9uZW50Lmh0bWxcIixcbn0pXG5leHBvcnQgY2xhc3MgSXRlbXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgVXBsb2FkU2Vzc2lvbjogU2Vzc2lvbjtcbiAgICBwcml2YXRlIG1lZGlhZmlsZXBpY2tlcjtcbiAgICBjb25zdHJ1Y3RvcihcblxuICAgICkge1xuICAgICAgICB0aGlzLlVwbG9hZFNlc3Npb24gPSBzZXNzaW9uKCdpbWFnZS11cGxvYWQnKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHsgfVxuXG4gICAgVmlkZW9QaWNrZXIoKXtcbiAgICAgICAgbGV0IG9wdGlvbnM6IE1lZGlhRmlsZXBpY2tlck9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgICAgICAgbXhjb3VudDogMSxcbiAgICAgICAgICAgICAgICBlbmFibGVJbWFnZVBpY2tlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgZW5hYmxlVmlkZW9QaWNrZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgZW5hYmxlQ2FtZXJhU3VwcG9ydDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm1lZGlhZmlsZXBpY2tlciA9IG5ldyBNZWRpYWZpbGVwaWNrZXIoKTtcbiAgICAgICAgdGhpcy5tZWRpYWZpbGVwaWNrZXIub24oXCJnZXRGaWxlc1wiLCAgKHJlczogYW55KSA9PntcblxuICAgICAgICAgICAgbGV0IGZpbGVzID0gcmVzLmZpbGVzO1xuXG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAgICAgZmlsZXMgPSBmaWxlcy5zcGxpdChcIixcIik7XG5cbiAgICAgICAgICAgICAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZE11bHRpcGFydEltYWdlUGlja2VyKHtmaWxlVXJpOiBmaWxlfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVcGxvYWQ6ICR7KGUuY3VycmVudEJ5dGVzIC8gZS50b3RhbEJ5dGVzKSAqIDEwMH1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY29tcGxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoZXJlIHdhcyBzb21lIHByb2JsZW0gdG8gc2VsZWN0IHRoZSBmaWxlLiBMb29rcyBsaWtlIHVzZXIgaGFzIGNhbmNlbCBpdC5cIilcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZWRpYWZpbGVwaWNrZXIub24oXCJlcnJvclwiLCAgKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMubXNnKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZWRpYWZpbGVwaWNrZXIuc3RhcnRGaWxlUGlja2VyKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGNhbWVyYU9wZW4oKXtcbiAgICAgICAgY2FtZXJhLnJlcXVlc3RQZXJtaXNzaW9ucygpO1xuICAgICAgICBjYW1lcmFcbiAgICAgICAgICAgIC50YWtlUGljdHVyZSh7XG4gICAgICAgICAgICAgICAgc2F2ZVRvR2FsbGVyeTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjYW1lcmFGYWNpbmc6ICdmcm9udCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihpbWFnZUFzc2V0ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaW1hZ2UgOiBhbnk7XG4gICAgICAgICAgICAgICAgaWYoaXNBbmRyb2lkKXtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UgPSA8YW55PntcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVVcmk6IGltYWdlQXNzZXQuYW5kcm9pZFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkTXVsdGlwYXJ0SW1hZ2VQaWNrZXIoaW1hZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0OiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXBsb2FkOiAkeyhlLmN1cnJlbnRCeXRlcyAvIGUudG90YWxCeXRlcykgKiAxMDB9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgc291cmNlID0gbmV3IGltYWdlU291cmNlLkltYWdlU291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5mcm9tQXNzZXQoaW1hZ2VBc3NldClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGltYWdlU291cmNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZm9sZGVyID0gZnMua25vd25Gb2xkZXJzLmRvY3VtZW50cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXRoID0gZnMucGF0aC5qb2luKGZvbGRlci5wYXRoLCBcIlRlbXBcIitEYXRlLm5vdygpK1wiLmpwZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2F2ZWQgPSBpbWFnZVNvdXJjZS5zYXZlVG9GaWxlKHBhdGgsIFwicG5nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNhdmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzYXZlZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkTXVsdGlwYXJ0SW1hZ2VQaWNrZXIoe2ZpbGVVcmk6IHBhdGh9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVwbG9hZDogJHsoZS5jdXJyZW50Qnl0ZXMgLyBlLnRvdGFsQnl0ZXMpICogMTAwfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIC0+IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcGlja2VyT3Blbigpe1xuICAgICAgICBsZXQgb3B0aW9uczogTWVkaWFGaWxlcGlja2VyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgICAgICAgICBteGNvdW50OiAxLFxuICAgICAgICAgICAgICAgIGVuYWJsZUltYWdlUGlja2VyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVuYWJsZVZpZGVvUGlja2VyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlbmFibGVDYW1lcmFTdXBwb3J0OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWVkaWFmaWxlcGlja2VyID0gbmV3IE1lZGlhZmlsZXBpY2tlcigpO1xuICAgICAgICB0aGlzLm1lZGlhZmlsZXBpY2tlci5vbihcImdldEZpbGVzXCIsICAocmVzOiBhbnkpID0+e1xuXG4gICAgICAgICAgICBsZXQgZmlsZXMgPSByZXMuZmlsZXM7XG5cbiAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgICAgICBmaWxlcyA9IGZpbGVzLnNwbGl0KFwiLFwiKTtcblxuICAgICAgICAgICAgICAgIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkTXVsdGlwYXJ0SW1hZ2VQaWNrZXIoe2ZpbGVVcmk6IGZpbGV9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFVwbG9hZDogJHsoZS5jdXJyZW50Qnl0ZXMgLyBlLnRvdGFsQnl0ZXMpICogMTAwfWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGhlcmUgd2FzIHNvbWUgcHJvYmxlbSB0byBzZWxlY3QgdGhlIGZpbGUuIExvb2tzIGxpa2UgdXNlciBoYXMgY2FuY2VsIGl0LlwiKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1lZGlhZmlsZXBpY2tlci5vbihcImVycm9yXCIsICAocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcy5tc2cpXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1lZGlhZmlsZXBpY2tlci5zdGFydEZpbGVQaWNrZXIob3B0aW9ucyk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIHVwbG9hZE11bHRpcGFydEltYWdlUGlja2VyKGltYWdlOiBhbnkpOiBTdWJqZWN0PGFueT4ge1xuXG4gICAgICAgIGxldCBmaWxlVXJpID0gaW1hZ2UuZmlsZVVyaTtcbiAgICAgICAgbGV0IGZpbGVuYW1lID0gZmlsZVVyaS5zdWJzdHJpbmcoZmlsZVVyaS5sYXN0SW5kZXhPZignLycpKzEpO1xuICAgICAgICBsZXQgbWltZXR5cGUgPSBmaWxlbmFtZS5zdWJzdHJpbmcoZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKSsxKTtcbiAgICAgICAgbGV0IHVwbG9hZFR5cGU7XG4gICAgICAgIGxldCByZXF1ZXN0O1xuICAgICAgICBpZihtaW1ldHlwZSA9PT0gJ21wNCcpe1xuICAgICAgICAgICAgdXBsb2FkVHlwZSA9IFwidmlkZW9cIjtcbiAgICAgICAgICAgIHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly9odHRwYmluLm9yZy9wb3N0XCIsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiLFxuICAgICAgICAgICAgICAgICAgICBcIkZpbGUtTmFtZVwiOiBmaWxlbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBcIkJlYXJlciBleUowZVhBaU9pSktWMVFpTENKaGJHY2lPaUpJVXpJMU5pSjkuZXlKdVlXMWxhV1FpT2lKaVlXTTBaV00yWWkxa05tTTRMVFEwTmpBdE9HVTVaUzFtTlRVeU1XWmhaR0UzWVdVaUxDSjFibWx4ZFdWZmJtRnRaU0k2SW0xZmNtRjZZVjlvWVhOellXNUFhRzkwYldGcGJDNWpiMjBpTENKb2RIUndPaTh2YzJOb1pXMWhjeTV0YVdOeWIzTnZablF1WTI5dEwyRmpZMlZ6YzJOdmJuUnliMnh6WlhKMmFXTmxMekl3TVRBdk1EY3ZZMnhoYVcxekwybGtaVzUwYVhSNWNISnZkbWxrWlhJaU9pSkJVMUF1VGtWVUlFbGtaVzUwYVhSNUlpd2lRWE53VG1WMExrbGtaVzUwYVhSNUxsTmxZM1Z5YVhSNVUzUmhiWEFpT2lJMk5qYzNOakU1T1MxaFlUSmpMVFE1WW1RdFltWTFZUzFpTXpnMk16WTJOVFV6T1dRaUxDSlZjMlZ5U1dRaU9pSmlZV00wWldNMllpMWtObU00TFRRME5qQXRPR1U1WlMxbU5UVXlNV1poWkdFM1lXVWlMQ0pwYzNNaU9pSm9kSFJ3T2k4dmJHOWpZV3hvYjNOMElpd2lZWFZrSWpvaU5ERTBaVEU1TWpkaE16ZzROR1kyT0dGaVl6YzVaamN5T0RNNE16ZG1aREVpTENKbGVIQWlPakUxTmpZeU5UUTBNamtzSW01aVppSTZNVFV4TkRReE5EUXlPWDAuZnAwSXlRU0lkOHNpc0dRM2txTVBYb3Z6Y2w4S0daME05TEJqblNsT3BTRVwiLFxuICAgICAgICAgICAgICAgICAgICBcIlVzZXJJZFwiOiBcImJhYzRlYzZiLWQ2YzgtNDQ2MC04ZTllLWY1NTIxZmFkYTdhZVwiLFxuICAgICAgICAgICAgICAgICAgICBcIlF1ZXN0aW9uSWRcIjogJzVhNDQyMGI1M2E1ZDVhMWMzOGUzNDAyOCcsXG4gICAgICAgICAgICAgICAgICAgIFwiR2FtZUlkXCI6ICcxMydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgVXBsb2FkaW5nICR7ZmlsZW5hbWV9YFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVwbG9hZFR5cGUgPSBcImltYWdlXCI7XG4gICAgICAgICAgICByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIHVybDogXCJodHRwOi8vaHR0cGJpbi5vcmcvcG9zdFwiLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixcbiAgICAgICAgICAgICAgICAgICAgXCJGaWxlLU5hbWVcIjogZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogXCJCZWFyZXIgZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKSVV6STFOaUo5LmV5SnVZVzFsYVdRaU9pSmlZV00wWldNMllpMWtObU00TFRRME5qQXRPR1U1WlMxbU5UVXlNV1poWkdFM1lXVWlMQ0oxYm1seGRXVmZibUZ0WlNJNkltMWZjbUY2WVY5b1lYTnpZVzVBYUc5MGJXRnBiQzVqYjIwaUxDSm9kSFJ3T2k4dmMyTm9aVzFoY3k1dGFXTnliM052Wm5RdVkyOXRMMkZqWTJWemMyTnZiblJ5YjJ4elpYSjJhV05sTHpJd01UQXZNRGN2WTJ4aGFXMXpMMmxrWlc1MGFYUjVjSEp2ZG1sa1pYSWlPaUpCVTFBdVRrVlVJRWxrWlc1MGFYUjVJaXdpUVhOd1RtVjBMa2xrWlc1MGFYUjVMbE5sWTNWeWFYUjVVM1JoYlhBaU9pSTJOamMzTmpFNU9TMWhZVEpqTFRRNVltUXRZbVkxWVMxaU16ZzJNelkyTlRVek9XUWlMQ0pWYzJWeVNXUWlPaUppWVdNMFpXTTJZaTFrTm1NNExUUTBOakF0T0dVNVpTMW1OVFV5TVdaaFpHRTNZV1VpTENKcGMzTWlPaUpvZEhSd09pOHZiRzlqWVd4b2IzTjBJaXdpWVhWa0lqb2lOREUwWlRFNU1qZGhNemc0TkdZMk9HRmlZemM1WmpjeU9ETTRNemRtWkRFaUxDSmxlSEFpT2pFMU5qWXlOVFEwTWprc0ltNWlaaUk2TVRVeE5EUXhORFF5T1gwLmZwMEl5UVNJZDhzaXNHUTNrcU1QWG92emNsOEtHWjBNOUxCam5TbE9wU0VcIixcbiAgICAgICAgICAgICAgICAgICAgXCJVc2VySWRcIjogXCJiYWM0ZWM2Yi1kNmM4LTQ0NjAtOGU5ZS1mNTUyMWZhZGE3YWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJRdWVzdGlvbklkXCI6ICc1YTQ0MjBiNTNhNWQ1YTFjMzhlMzQwMjgnLFxuICAgICAgICAgICAgICAgICAgICBcIkdhbWVJZFwiOiAnMidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgVXBsb2FkaW5nIGBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCBwYXJhbXMgPSBbeyBuYW1lOiBmaWxlbmFtZSwgZmlsZW5hbWU6IGZpbGVVcmksIG1pbWVUeXBlOiBgJHt1cGxvYWRUeXBlfS8ke21pbWV0eXBlfWAgfV07XG4gICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuXG4gICAgICAgIGxldCBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgICAgICBsZXQgdGFzayA9IHRoaXMuVXBsb2FkU2Vzc2lvbi5tdWx0aXBhcnRVcGxvYWQocGFyYW1zLCByZXF1ZXN0KTtcbiAgICAgICAgdGFzay5vbigncHJvZ3Jlc3MnLCAoZTogYW55KSA9PiBzdWJqZWN0Lm5leHQoZSkpO1xuXG4gICAgICAgIHRhc2sub24oJ2Vycm9yJywgKGUpID0+IHN1YmplY3QuZXJyb3IoZSkpO1xuXG4gICAgICAgIHRhc2sub24oJ2NvbXBsZXRlJywgKGUpID0+IHN1YmplY3QuY29tcGxldGUoKSk7XG5cbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfVxuXG59XG4iXX0=